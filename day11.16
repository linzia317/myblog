算法
一,顺序表
线性枚举 前缀和 双指针 二分枚举 三分枚举 离散化 冒泡排序 选择排序快速排序 插入排序希尔排序 归并排序 堆排序 基数排序 计数排序 模拟 贪心
二,链表
单向链表 双向链表
三,栈
LIFO栈（后进先出）单调栈
四,队列
FLFO队列（先进先出） 双端队列 单调队列
五,字符串
KMP 字典树 马拉车 AC自动机 后缀数组 BM
六,树
二叉树 二叉搜索树 AVL树 线段树 霍夫曼树 堆 红黑树 伸展树 左偏树 Treap B+树 树链剖分
七,图
二分图 最短路 最小生成树 最近公共祖先 深度优先搜索 强连通分量 双连通分量 2-sat 欧拉回路
哈密尔顿回路 迭代加深 广度优先搜索 拓扑排序 A* 稳定婚姻 双向广搜 查分约束 并查集 哈希表 跳跃表 树状数组 最大流
八,动态规划
递推 线性DP 记忆化搜索 背包问题 树形DP 区间DP 数位DP 状压DP

crud
CRUD 是数据库和软件开发中常见的操作，它代表四种基本功能：

1. **Create（创建）**：用于添加新数据，例如向数据库中插入一条记录。
   - 示例：`INSERT INTO users (name, age) VALUES ('Alice', 25);`

2. **Read（读取）**：用于查询或读取数据，例如从数据库中检索信息。
   - 示例：`SELECT * FROM users WHERE name = 'Alice';`

3. **Update（更新）**：用于修改现有数据，例如更改用户的年龄。
   - 示例：`UPDATE users SET age = 26 WHERE name = 'Alice';`

4. **Delete（删除）**：用于删除数据，例如从数据库中移除记录。
   - 示例：`DELETE FROM users WHERE name = 'Alice';`

在实际开发中，CRUD 是构建应用的核心。例如，在一个用户管理系统中，CRUD 用于处理用户信息。通常，CRUD 操作通过后端 API 实现，并连接到数据库。


冒泡排序
冒泡排序是一种简单的排序算法，通过多次遍历数组，相邻元素比较并交换位置，将最大（或最小）的元素逐步"冒泡"到数组的一端，直至完成排序。

### 算法步骤
1. 比较相邻的元素，如果前一个比后一个大（或小，视排序要求），就交换它们的位置。
2. 每次遍历后，未排序部分的最大值（或最小值）都会被移动到正确位置。
3. 重复上述步骤，缩小未排序部分，直到数组完全有序。

### 动画示例
假设数组为 `[5, 3, 8, 6, 2]`，从小到大排序：

- **第一轮**：  
  - 比较 `5` 和 `3`，交换 → `[3, 5, 8, 6, 2]`  
  - 比较 `5` 和 `8`，不交换 → `[3, 5, 8, 6, 2]`  
  - 比较 `8` 和 `6`，交换 → `[3, 5, 6, 8, 2]`  
  - 比较 `8` 和 `2`，交换 → `[3, 5, 6, 2, 8]`  

- **第二轮**：  
  - 比较 `3` 和 `5`，不交换 → `[3, 5, 6, 2, 8]`  
  - 比较 `5` 和 `6`，不交换 → `[3, 5, 6, 2, 8]`  
  - 比较 `6` 和 `2`，交换 → `[3, 5, 2, 6, 8]`  

- **第三轮**：  
  - 比较 `3` 和 `5`，不交换 → `[3, 5, 2, 6, 8]`  
  - 比较 `5` 和 `2`，交换 → `[3, 2, 5, 6, 8]`  

- **第四轮**：  
  - 比较 `3` 和 `2`，交换 → `[2, 3, 5, 6, 8]`  

排序完成！

### Python 实现
```python
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):  # 控制轮次
        for j in range(0, n - i - 1):  # 控制每轮比较范围
            if arr[j] > arr[j + 1]:  # 比较相邻元素
                arr[j], arr[j + 1] = arr[j + 1], arr[j]  # 交换
    return arr

# 示例
array = [5, 3, 8, 6, 2]
sorted_array = bubble_sort(array)
print(sorted_array)  # 输出: [2, 3, 5, 6, 8]
```

冒泡排序适用于小规模数据，但效率较低，时间复杂度为 \(O(n^2)\)。
